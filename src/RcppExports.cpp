// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// calc_info_EB
NumericVector calc_info_EB(NumericVector x, NumericMatrix item_parm, IntegerVector ncat, IntegerVector model);
RcppExport SEXP _Shadow_calc_info_EB(SEXP xSEXP, SEXP item_parmSEXP, SEXP ncatSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type item_parm(item_parmSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_info_EB(x, item_parm, ncat, model));
    return rcpp_result_gen;
END_RCPP
}
// calc_info_FB
NumericVector calc_info_FB(NumericVector x, List items_list, IntegerVector ncat, IntegerVector model, bool useEAP);
RcppExport SEXP _Shadow_calc_info_FB(SEXP xSEXP, SEXP items_listSEXP, SEXP ncatSEXP, SEXP modelSEXP, SEXP useEAPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type items_list(items_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    Rcpp::traits::input_parameter< bool >::type useEAP(useEAPSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_info_FB(x, items_list, ncat, model, useEAP));
    return rcpp_result_gen;
END_RCPP
}
// calc_MI_FB
NumericVector calc_MI_FB(NumericVector x, List items_list, IntegerVector ncat, IntegerVector model);
RcppExport SEXP _Shadow_calc_MI_FB(SEXP xSEXP, SEXP items_listSEXP, SEXP ncatSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type items_list(items_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_MI_FB(x, items_list, ncat, model));
    return rcpp_result_gen;
END_RCPP
}
// calc_likelihood
double calc_likelihood(const double& x, NumericMatrix item_parm, IntegerVector resp, IntegerVector ncat, IntegerVector model);
RcppExport SEXP _Shadow_calc_likelihood(SEXP xSEXP, SEXP item_parmSEXP, SEXP respSEXP, SEXP ncatSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type item_parm(item_parmSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_likelihood(x, item_parm, resp, ncat, model));
    return rcpp_result_gen;
END_RCPP
}
// calc_likelihood_function
NumericVector calc_likelihood_function(NumericVector theta_grid, NumericMatrix item_parm, IntegerVector resp, IntegerVector ncat, IntegerVector model);
RcppExport SEXP _Shadow_calc_likelihood_function(SEXP theta_gridSEXP, SEXP item_parmSEXP, SEXP respSEXP, SEXP ncatSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta_grid(theta_gridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type item_parm(item_parmSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_likelihood_function(theta_grid, item_parm, resp, ncat, model));
    return rcpp_result_gen;
END_RCPP
}
// calc_log_likelihood
double calc_log_likelihood(const double& x, NumericMatrix item_parm, IntegerVector resp, IntegerVector ncat, IntegerVector model, const int& prior, NumericVector prior_parm);
RcppExport SEXP _Shadow_calc_log_likelihood(SEXP xSEXP, SEXP item_parmSEXP, SEXP respSEXP, SEXP ncatSEXP, SEXP modelSEXP, SEXP priorSEXP, SEXP prior_parmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type item_parm(item_parmSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const int& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_parm(prior_parmSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_log_likelihood(x, item_parm, resp, ncat, model, prior, prior_parm));
    return rcpp_result_gen;
END_RCPP
}
// calc_log_likelihood_function
NumericVector calc_log_likelihood_function(NumericVector theta_grid, NumericMatrix item_parm, IntegerVector resp, IntegerVector ncat, IntegerVector model, const int& prior, NumericVector prior_parm);
RcppExport SEXP _Shadow_calc_log_likelihood_function(SEXP theta_gridSEXP, SEXP item_parmSEXP, SEXP respSEXP, SEXP ncatSEXP, SEXP modelSEXP, SEXP priorSEXP, SEXP prior_parmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta_grid(theta_gridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type item_parm(item_parmSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const int& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_parm(prior_parmSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_log_likelihood_function(theta_grid, item_parm, resp, ncat, model, prior, prior_parm));
    return rcpp_result_gen;
END_RCPP
}
// calc_posterior
double calc_posterior(const double& x, NumericMatrix item_parm, IntegerVector resp, IntegerVector ncat, IntegerVector model, const int& prior, NumericVector prior_parm);
RcppExport SEXP _Shadow_calc_posterior(SEXP xSEXP, SEXP item_parmSEXP, SEXP respSEXP, SEXP ncatSEXP, SEXP modelSEXP, SEXP priorSEXP, SEXP prior_parmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type item_parm(item_parmSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const int& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_parm(prior_parmSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_posterior(x, item_parm, resp, ncat, model, prior, prior_parm));
    return rcpp_result_gen;
END_RCPP
}
// calc_posterior_function
NumericVector calc_posterior_function(NumericVector theta_grid, NumericMatrix item_parm, IntegerVector resp, IntegerVector ncat, IntegerVector model, const int& prior, NumericVector prior_parm);
RcppExport SEXP _Shadow_calc_posterior_function(SEXP theta_gridSEXP, SEXP item_parmSEXP, SEXP respSEXP, SEXP ncatSEXP, SEXP modelSEXP, SEXP priorSEXP, SEXP prior_parmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta_grid(theta_gridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type item_parm(item_parmSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const int& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_parm(prior_parmSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_posterior_function(theta_grid, item_parm, resp, ncat, model, prior, prior_parm));
    return rcpp_result_gen;
END_RCPP
}
// calc_posterior_single
double calc_posterior_single(const double& x, NumericVector item_parm, const int& resp, const int& ncat, const int& model, const int& prior, NumericVector prior_parm);
RcppExport SEXP _Shadow_calc_posterior_single(SEXP xSEXP, SEXP item_parmSEXP, SEXP respSEXP, SEXP ncatSEXP, SEXP modelSEXP, SEXP priorSEXP, SEXP prior_parmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type item_parm(item_parmSEXP);
    Rcpp::traits::input_parameter< const int& >::type resp(respSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< const int& >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const int& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_parm(prior_parmSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_posterior_single(x, item_parm, resp, ncat, model, prior, prior_parm));
    return rcpp_result_gen;
END_RCPP
}
// theta_EAP
NumericVector theta_EAP(NumericVector theta_grid, NumericMatrix item_parm, IntegerVector resp, IntegerVector ncat, IntegerVector model, const int& prior, NumericVector prior_parm);
RcppExport SEXP _Shadow_theta_EAP(SEXP theta_gridSEXP, SEXP item_parmSEXP, SEXP respSEXP, SEXP ncatSEXP, SEXP modelSEXP, SEXP priorSEXP, SEXP prior_parmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta_grid(theta_gridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type item_parm(item_parmSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const int& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_parm(prior_parmSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_EAP(theta_grid, item_parm, resp, ncat, model, prior, prior_parm));
    return rcpp_result_gen;
END_RCPP
}
// theta_EAP_matrix
NumericMatrix theta_EAP_matrix(NumericVector theta_grid, NumericMatrix item_parm, IntegerMatrix Resp, IntegerVector ncat, IntegerVector model, const int& prior, NumericVector prior_parm);
RcppExport SEXP _Shadow_theta_EAP_matrix(SEXP theta_gridSEXP, SEXP item_parmSEXP, SEXP RespSEXP, SEXP ncatSEXP, SEXP modelSEXP, SEXP priorSEXP, SEXP prior_parmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta_grid(theta_gridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type item_parm(item_parmSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type Resp(RespSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const int& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_parm(prior_parmSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_EAP_matrix(theta_grid, item_parm, Resp, ncat, model, prior, prior_parm));
    return rcpp_result_gen;
END_RCPP
}
// theta_EB
NumericVector theta_EB(const int& nx, const double& theta_init, const double& theta_prop, NumericMatrix item_parm, IntegerVector resp, IntegerVector ncat, IntegerVector model, const int& prior, NumericVector prior_parm);
RcppExport SEXP _Shadow_theta_EB(SEXP nxSEXP, SEXP theta_initSEXP, SEXP theta_propSEXP, SEXP item_parmSEXP, SEXP respSEXP, SEXP ncatSEXP, SEXP modelSEXP, SEXP priorSEXP, SEXP prior_parmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta_prop(theta_propSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type item_parm(item_parmSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const int& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_parm(prior_parmSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_EB(nx, theta_init, theta_prop, item_parm, resp, ncat, model, prior, prior_parm));
    return rcpp_result_gen;
END_RCPP
}
// theta_EB_single
NumericVector theta_EB_single(const int& nx, const double& theta_init, const double& theta_prop, NumericVector item_parm, const int& resp, const int& ncat, const int& model, const int& prior, NumericVector prior_parm);
RcppExport SEXP _Shadow_theta_EB_single(SEXP nxSEXP, SEXP theta_initSEXP, SEXP theta_propSEXP, SEXP item_parmSEXP, SEXP respSEXP, SEXP ncatSEXP, SEXP modelSEXP, SEXP priorSEXP, SEXP prior_parmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta_prop(theta_propSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type item_parm(item_parmSEXP);
    Rcpp::traits::input_parameter< const int& >::type resp(respSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< const int& >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const int& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_parm(prior_parmSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_EB_single(nx, theta_init, theta_prop, item_parm, resp, ncat, model, prior, prior_parm));
    return rcpp_result_gen;
END_RCPP
}
// theta_FB
NumericVector theta_FB(const int& nx, const double& theta_init, const double& theta_prop, List items_list, NumericMatrix item_init, IntegerVector resp, IntegerVector ncat, IntegerVector model, const int& prior, NumericVector prior_parm);
RcppExport SEXP _Shadow_theta_FB(SEXP nxSEXP, SEXP theta_initSEXP, SEXP theta_propSEXP, SEXP items_listSEXP, SEXP item_initSEXP, SEXP respSEXP, SEXP ncatSEXP, SEXP modelSEXP, SEXP priorSEXP, SEXP prior_parmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta_prop(theta_propSEXP);
    Rcpp::traits::input_parameter< List >::type items_list(items_listSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type item_init(item_initSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const int& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_parm(prior_parmSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_FB(nx, theta_init, theta_prop, items_list, item_init, resp, ncat, model, prior, prior_parm));
    return rcpp_result_gen;
END_RCPP
}
// theta_FB_single
NumericVector theta_FB_single(const int& nx, const double& theta_init, const double& theta_prop, NumericMatrix item_mcmc, NumericVector item_init, const int& resp, const int& ncat, const int& model, const int& prior, NumericVector prior_parm);
RcppExport SEXP _Shadow_theta_FB_single(SEXP nxSEXP, SEXP theta_initSEXP, SEXP theta_propSEXP, SEXP item_mcmcSEXP, SEXP item_initSEXP, SEXP respSEXP, SEXP ncatSEXP, SEXP modelSEXP, SEXP priorSEXP, SEXP prior_parmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta_prop(theta_propSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type item_mcmc(item_mcmcSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type item_init(item_initSEXP);
    Rcpp::traits::input_parameter< const int& >::type resp(respSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< const int& >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const int& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_parm(prior_parmSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_FB_single(nx, theta_init, theta_prop, item_mcmc, item_init, resp, ncat, model, prior, prior_parm));
    return rcpp_result_gen;
END_RCPP
}
// findSegment
IntegerVector findSegment(NumericVector segment, NumericVector x);
RcppExport SEXP _Shadow_findSegment(SEXP segmentSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type segment(segmentSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(findSegment(segment, x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Shadow_calc_info_EB", (DL_FUNC) &_Shadow_calc_info_EB, 4},
    {"_Shadow_calc_info_FB", (DL_FUNC) &_Shadow_calc_info_FB, 5},
    {"_Shadow_calc_MI_FB", (DL_FUNC) &_Shadow_calc_MI_FB, 4},
    {"_Shadow_calc_likelihood", (DL_FUNC) &_Shadow_calc_likelihood, 5},
    {"_Shadow_calc_likelihood_function", (DL_FUNC) &_Shadow_calc_likelihood_function, 5},
    {"_Shadow_calc_log_likelihood", (DL_FUNC) &_Shadow_calc_log_likelihood, 7},
    {"_Shadow_calc_log_likelihood_function", (DL_FUNC) &_Shadow_calc_log_likelihood_function, 7},
    {"_Shadow_calc_posterior", (DL_FUNC) &_Shadow_calc_posterior, 7},
    {"_Shadow_calc_posterior_function", (DL_FUNC) &_Shadow_calc_posterior_function, 7},
    {"_Shadow_calc_posterior_single", (DL_FUNC) &_Shadow_calc_posterior_single, 7},
    {"_Shadow_theta_EAP", (DL_FUNC) &_Shadow_theta_EAP, 7},
    {"_Shadow_theta_EAP_matrix", (DL_FUNC) &_Shadow_theta_EAP_matrix, 7},
    {"_Shadow_theta_EB", (DL_FUNC) &_Shadow_theta_EB, 9},
    {"_Shadow_theta_EB_single", (DL_FUNC) &_Shadow_theta_EB_single, 9},
    {"_Shadow_theta_FB", (DL_FUNC) &_Shadow_theta_FB, 10},
    {"_Shadow_theta_FB_single", (DL_FUNC) &_Shadow_theta_FB_single, 10},
    {"_Shadow_findSegment", (DL_FUNC) &_Shadow_findSegment, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_Shadow(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
